(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/coffee-class/controller.test.coffee":[function(require,module,exports){
var ThingDBMock, controller, ctrl;

controller = require('./controller.coffee');

ctrl = {};

ThingDBMock = {
  query: function(cback) {
    return cback(['one']);
  }
};

describe("coffee-class controller", function() {
  it("should load things", function() {
    spyOn(ThingDBMock, 'query');
    ctrl = new controller(ThingDBMock);
    return expect(ThingDBMock.query).toHaveBeenCalled();
  });
  beforeEach(function() {
    return ctrl = new controller(ThingDBMock);
  });
  it("should have one things loaded from server", function() {
    return expect(ctrl.things.length).toBe(1);
  });
  it("should add an item and reset it", function() {
    ctrl.item = "test";
    ctrl.add();
    expect(ctrl.things.length).toBe(2);
    return expect(ctrl.item).toEqual("");
  });
  it("should not add an item, if nothing is set", function() {
    ctrl.add();
    return expect(ctrl.things.length).toBe(1);
  });
  return describe("removing items", function() {
    beforeEach(function() {
      ctrl.item = "test1";
      ctrl.add();
      ctrl.item = "test2";
      ctrl.add();
      ctrl.item = "test3";
      return ctrl.add();
    });
    it("should remove item by index", function() {
      expect(ctrl.things.length).toBe(4);
      ctrl.remove(1);
      expect(ctrl.things.length).toBe(3);
      return expect(ctrl.things[1]).toEqual("test2");
    });
    return it("should remove all items", function() {
      expect(ctrl.things.length).toBe(4);
      ctrl.reset();
      return expect(ctrl.things.length).toBe(0);
    });
  });
});



},{"./controller.coffee":"/home/ubuntu/workspace/src/coffee-class/controller.coffee"}],"/home/ubuntu/workspace/src/coffee-class/controller.coffee":[function(require,module,exports){
var coffeeClass;

module.exports = coffeeClass = (function() {
  coffeeClass.prototype.things = [];

  coffeeClass.prototype.item = "";

  function coffeeClass(ThingsDB) {
    this.things = [];
    ThingsDB.query((function(_this) {
      return function(res) {
        return _this.things = res;
      };
    })(this));
  }

  coffeeClass.prototype.add = function() {
    if (this.item) {
      this.things.push(this.item);
    }
    return this.item = "";
  };

  coffeeClass.prototype.remove = function(index) {
    return this.things.splice(index, 1);
  };

  coffeeClass.prototype.reset = function() {
    return this.things = [];
  };

  return coffeeClass;

})();



},{}]},{},["./src/coffee-class/controller.test.coffee"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS91YnVudHUvd29ya3NwYWNlL3NyYy9jb2ZmZWUtY2xhc3MvY29udHJvbGxlci50ZXN0LmNvZmZlZSIsIi9ob21lL3VidW50dS93b3Jrc3BhY2Uvc3JjL2NvZmZlZS1jbGFzcy9jb250cm9sbGVyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUEsNkJBQUE7O0FBQUEsVUFBQSxHQUFhLE9BQUEsQ0FBUSxxQkFBUixDQUFiLENBQUE7O0FBQUEsSUFDQSxHQUFPLEVBRFAsQ0FBQTs7QUFBQSxXQUVBLEdBQWM7QUFBQSxFQUFBLEtBQUEsRUFBTSxTQUFDLEtBQUQsR0FBQTtXQUFVLEtBQUEsQ0FBTSxDQUFDLEtBQUQsQ0FBTixFQUFWO0VBQUEsQ0FBTjtDQUZkLENBQUE7O0FBQUEsUUFJQSxDQUFTLHlCQUFULEVBQW1DLFNBQUEsR0FBQTtBQUVqQyxFQUFBLEVBQUEsQ0FBRyxvQkFBSCxFQUF3QixTQUFBLEdBQUE7QUFDdEIsSUFBQSxLQUFBLENBQU0sV0FBTixFQUFtQixPQUFuQixDQUFBLENBQUE7QUFBQSxJQUNBLElBQUEsR0FBVyxJQUFBLFVBQUEsQ0FBVyxXQUFYLENBRFgsQ0FBQTtXQUVBLE1BQUEsQ0FBTyxXQUFXLENBQUMsS0FBbkIsQ0FBeUIsQ0FBQyxnQkFBMUIsQ0FBQSxFQUhzQjtFQUFBLENBQXhCLENBQUEsQ0FBQTtBQUFBLEVBS0EsVUFBQSxDQUFXLFNBQUEsR0FBQTtXQUNULElBQUEsR0FBVyxJQUFBLFVBQUEsQ0FBVyxXQUFYLEVBREY7RUFBQSxDQUFYLENBTEEsQ0FBQTtBQUFBLEVBUUEsRUFBQSxDQUFHLDJDQUFILEVBQStDLFNBQUEsR0FBQTtXQUM3QyxNQUFBLENBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFuQixDQUEwQixDQUFDLElBQTNCLENBQWdDLENBQWhDLEVBRDZDO0VBQUEsQ0FBL0MsQ0FSQSxDQUFBO0FBQUEsRUFXQSxFQUFBLENBQUcsaUNBQUgsRUFBcUMsU0FBQSxHQUFBO0FBQ25DLElBQUEsSUFBSSxDQUFDLElBQUwsR0FBVSxNQUFWLENBQUE7QUFBQSxJQUNBLElBQUksQ0FBQyxHQUFMLENBQUEsQ0FEQSxDQUFBO0FBQUEsSUFFQSxNQUFBLENBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFuQixDQUEwQixDQUFDLElBQTNCLENBQWdDLENBQWhDLENBRkEsQ0FBQTtXQUdBLE1BQUEsQ0FBTyxJQUFJLENBQUMsSUFBWixDQUFpQixDQUFDLE9BQWxCLENBQTBCLEVBQTFCLEVBSm1DO0VBQUEsQ0FBckMsQ0FYQSxDQUFBO0FBQUEsRUFpQkEsRUFBQSxDQUFHLDJDQUFILEVBQStDLFNBQUEsR0FBQTtBQUM3QyxJQUFBLElBQUksQ0FBQyxHQUFMLENBQUEsQ0FBQSxDQUFBO1dBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBbkIsQ0FBMEIsQ0FBQyxJQUEzQixDQUFnQyxDQUFoQyxFQUY2QztFQUFBLENBQS9DLENBakJBLENBQUE7U0FxQkEsUUFBQSxDQUFTLGdCQUFULEVBQTBCLFNBQUEsR0FBQTtBQUN4QixJQUFBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLElBQUksQ0FBQyxJQUFMLEdBQVUsT0FBVixDQUFBO0FBQUEsTUFDQSxJQUFJLENBQUMsR0FBTCxDQUFBLENBREEsQ0FBQTtBQUFBLE1BRUEsSUFBSSxDQUFDLElBQUwsR0FBVSxPQUZWLENBQUE7QUFBQSxNQUdBLElBQUksQ0FBQyxHQUFMLENBQUEsQ0FIQSxDQUFBO0FBQUEsTUFJQSxJQUFJLENBQUMsSUFBTCxHQUFVLE9BSlYsQ0FBQTthQUtBLElBQUksQ0FBQyxHQUFMLENBQUEsRUFOUztJQUFBLENBQVgsQ0FBQSxDQUFBO0FBQUEsSUFRQSxFQUFBLENBQUcsNkJBQUgsRUFBaUMsU0FBQSxHQUFBO0FBQy9CLE1BQUEsTUFBQSxDQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBbkIsQ0FBMEIsQ0FBQyxJQUEzQixDQUFnQyxDQUFoQyxDQUFBLENBQUE7QUFBQSxNQUNBLElBQUksQ0FBQyxNQUFMLENBQVksQ0FBWixDQURBLENBQUE7QUFBQSxNQUVBLE1BQUEsQ0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQW5CLENBQTBCLENBQUMsSUFBM0IsQ0FBZ0MsQ0FBaEMsQ0FGQSxDQUFBO2FBR0EsTUFBQSxDQUFPLElBQUksQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFuQixDQUFzQixDQUFDLE9BQXZCLENBQStCLE9BQS9CLEVBSitCO0lBQUEsQ0FBakMsQ0FSQSxDQUFBO1dBY0EsRUFBQSxDQUFHLHlCQUFILEVBQTZCLFNBQUEsR0FBQTtBQUMzQixNQUFBLE1BQUEsQ0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQW5CLENBQTBCLENBQUMsSUFBM0IsQ0FBZ0MsQ0FBaEMsQ0FBQSxDQUFBO0FBQUEsTUFDQSxJQUFJLENBQUMsS0FBTCxDQUFBLENBREEsQ0FBQTthQUVBLE1BQUEsQ0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQW5CLENBQTBCLENBQUMsSUFBM0IsQ0FBZ0MsQ0FBaEMsRUFIMkI7SUFBQSxDQUE3QixFQWZ3QjtFQUFBLENBQTFCLEVBdkJpQztBQUFBLENBQW5DLENBSkEsQ0FBQTs7Ozs7QUNBQSxJQUFBLFdBQUE7O0FBQUEsTUFBTSxDQUFDLE9BQVAsR0FBdUI7QUFFckIsd0JBQUEsTUFBQSxHQUFRLEVBQVIsQ0FBQTs7QUFBQSx3QkFDQSxJQUFBLEdBQU0sRUFETixDQUFBOztBQUdhLEVBQUEscUJBQUMsUUFBRCxHQUFBO0FBQ1gsSUFBQSxJQUFDLENBQUEsTUFBRCxHQUFRLEVBQVIsQ0FBQTtBQUFBLElBQ0EsUUFBUSxDQUFDLEtBQVQsQ0FBZSxDQUFBLFNBQUEsS0FBQSxHQUFBO2FBQUEsU0FBQyxHQUFELEdBQUE7ZUFBUSxLQUFDLENBQUEsTUFBRCxHQUFVLElBQWxCO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZixDQURBLENBRFc7RUFBQSxDQUhiOztBQUFBLHdCQU9BLEdBQUEsR0FBSyxTQUFBLEdBQUE7QUFDSCxJQUFBLElBQXVCLElBQUMsQ0FBQSxJQUF4QjtBQUFBLE1BQUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQWEsSUFBQyxDQUFBLElBQWQsQ0FBQSxDQUFBO0tBQUE7V0FDQSxJQUFDLENBQUEsSUFBRCxHQUFRLEdBRkw7RUFBQSxDQVBMLENBQUE7O0FBQUEsd0JBV0EsTUFBQSxHQUFRLFNBQUMsS0FBRCxHQUFBO1dBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLENBQWUsS0FBZixFQUFxQixDQUFyQixFQUFWO0VBQUEsQ0FYUixDQUFBOztBQUFBLHdCQWFBLEtBQUEsR0FBTSxTQUFBLEdBQUE7V0FBRyxJQUFDLENBQUEsTUFBRCxHQUFRLEdBQVg7RUFBQSxDQWJOLENBQUE7O3FCQUFBOztJQUZGLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiY29udHJvbGxlciA9IHJlcXVpcmUgJy4vY29udHJvbGxlci5jb2ZmZWUnXG5jdHJsID0ge30gXG5UaGluZ0RCTW9jayA9IHF1ZXJ5OihjYmFjayktPiBjYmFjayhbJ29uZSddKSBcblxuZGVzY3JpYmUgXCJjb2ZmZWUtY2xhc3MgY29udHJvbGxlclwiLC0+XG4gIFxuICBpdCBcInNob3VsZCBsb2FkIHRoaW5nc1wiLC0+XG4gICAgc3B5T24oVGhpbmdEQk1vY2ssICdxdWVyeScpO1xuICAgIGN0cmwgPSBuZXcgY29udHJvbGxlcihUaGluZ0RCTW9jaylcbiAgICBleHBlY3QoVGhpbmdEQk1vY2sucXVlcnkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICBiZWZvcmVFYWNoIC0+XG4gICAgY3RybCA9IG5ldyBjb250cm9sbGVyKFRoaW5nREJNb2NrKVxuXG4gIGl0IFwic2hvdWxkIGhhdmUgb25lIHRoaW5ncyBsb2FkZWQgZnJvbSBzZXJ2ZXJcIiwtPiBcbiAgICBleHBlY3QoY3RybC50aGluZ3MubGVuZ3RoKS50b0JlKDEpXG4gICAgXG4gIGl0IFwic2hvdWxkIGFkZCBhbiBpdGVtIGFuZCByZXNldCBpdFwiLC0+XG4gICAgY3RybC5pdGVtPVwidGVzdFwiO1xuICAgIGN0cmwuYWRkKClcbiAgICBleHBlY3QoY3RybC50aGluZ3MubGVuZ3RoKS50b0JlKDIpXG4gICAgZXhwZWN0KGN0cmwuaXRlbSkudG9FcXVhbChcIlwiKVxuICAgIFxuICBpdCBcInNob3VsZCBub3QgYWRkIGFuIGl0ZW0sIGlmIG5vdGhpbmcgaXMgc2V0XCIsLT5cbiAgICBjdHJsLmFkZCgpXG4gICAgZXhwZWN0KGN0cmwudGhpbmdzLmxlbmd0aCkudG9CZSgxKVxuICBcbiAgZGVzY3JpYmUgXCJyZW1vdmluZyBpdGVtc1wiLC0+XG4gICAgYmVmb3JlRWFjaCAtPlxuICAgICAgY3RybC5pdGVtPVwidGVzdDFcIjtcbiAgICAgIGN0cmwuYWRkKCkgXG4gICAgICBjdHJsLml0ZW09XCJ0ZXN0MlwiO1xuICAgICAgY3RybC5hZGQoKSBcbiAgICAgIGN0cmwuaXRlbT1cInRlc3QzXCI7XG4gICAgICBjdHJsLmFkZCgpIFxuICAgIFxuICAgIGl0IFwic2hvdWxkIHJlbW92ZSBpdGVtIGJ5IGluZGV4XCIsLT5cbiAgICAgIGV4cGVjdChjdHJsLnRoaW5ncy5sZW5ndGgpLnRvQmUoNClcbiAgICAgIGN0cmwucmVtb3ZlKDEpXG4gICAgICBleHBlY3QoY3RybC50aGluZ3MubGVuZ3RoKS50b0JlKDMpXG4gICAgICBleHBlY3QoY3RybC50aGluZ3NbMV0pLnRvRXF1YWwoXCJ0ZXN0MlwiKVxuICAgIFxuICAgIGl0IFwic2hvdWxkIHJlbW92ZSBhbGwgaXRlbXNcIiwtPlxuICAgICAgZXhwZWN0KGN0cmwudGhpbmdzLmxlbmd0aCkudG9CZSg0KVxuICAgICAgY3RybC5yZXNldCgpXG4gICAgICBleHBlY3QoY3RybC50aGluZ3MubGVuZ3RoKS50b0JlKDApXG4gICAgXG4gICAgXG4gICAgIiwibW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBjb2ZmZWVDbGFzc1xuICBcbiAgdGhpbmdzOiBbXVxuICBpdGVtOiBcIlwiXG4gIFxuICBjb25zdHJ1Y3RvcjogKFRoaW5nc0RCKS0+XG4gICAgQHRoaW5ncz1bXVxuICAgIFRoaW5nc0RCLnF1ZXJ5IChyZXMpPT4gQHRoaW5ncyA9IHJlc1xuICAgIFxuICBhZGQ6IC0+XG4gICAgQHRoaW5ncy5wdXNoKEBpdGVtKSBpZihAaXRlbSlcbiAgICBAaXRlbSA9IFwiXCJcbiAgXG4gIHJlbW92ZTogKGluZGV4KS0+IEB0aGluZ3Muc3BsaWNlKGluZGV4LDEpXG5cbiAgcmVzZXQ6LT4gQHRoaW5ncz1bXSJdfQ==
